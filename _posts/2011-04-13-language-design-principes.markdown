---
layout: post
title: Дизайн языка программирования
tags:
  - language design
---

Я вот [тут](https://github.com/vladimir-vg/alonzo_prototype)
пытаюсь сделать прототип языка (на Ruby) программирования,
чисто для собственных экспериментов. Но мне не хотелось просто склонировать
уже готовую концепцию, хотелось попробовать что-то новое.

Описание языка (модульной системы, иерархии объектов,
особенностей поведения) оказалось не таким простым как сперва казалось.
Стали проявляться различные противоречия возможностей выразительности.
Но всё потихоньку продвигается.

Разбираясь с такой задачей я для себя выработал несколько тезисов как
необходимо подходить к проектированию языка. Собственно они:

 *   Язык должен давать свободу. Он должен давать программисту
     возможность изменять, усложнять его.
     В основе языка должно быть несколько простых, но мощных идей,
     которые задают стиль и основые способы выражения.
     
     Язык, это не набор выразительных конструкций, это
     _базис_ для их создания.

     Кроме того, базовые идеи языка должны быть
     ортогональными.
 
 *   Язык должен быть строгим. Он должен ограничивать программиста
     и не давать ему свободу делать всё что угодно. По крайней мере _не
     делать это доступным легко_ и в любом месте.
    
     Слишком мощные возможности и большая гибкость могут провоцировать
     людей писать труднопонимаемый код.
    
 *   Язык должен быть для людей.
 
      -   Он должен провоцировать программиста своим синтаксисом писать
          читаемый код.

      -   Язык должен учитывать, что программисты между собой не всегда
          могут договориться о каких-либо стандартах (например в каком виде
          предоставлять интерфейс к модулю или библиотеки), поэтому язык
          должен _навязывать_ подобные стандарты, но при этом желательно
          оставлять лазейку для создания альтернативы.
          Как было сказано выше, подобные изменения не должны
          быть доступны легко.

